{
    "docs": [
        {
            "location": "/", 
            "text": "Courier is a library for sending transactional emails using domain objects and concise\ninterfaces.\n\n\nCourier provides an interface for sending standardized emails using third-party\nSaaS SMTP providers, like SparkPost and Postmark. By leveraging a \nstandardized domain\nmodel\n for defining emails, Courier is\ncapable of defining drivers, referred to as \"couriers\", that allow the developer\nto easily swap underlying providers without changing any part of their code that builds\nthe email.", 
            "title": "Home"
        }, 
        {
            "location": "/getting-started/installation/", 
            "text": "Via Composer\n\n\ncomposer require quartzy/courier", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/installation/#via-composer", 
            "text": "composer require quartzy/courier", 
            "title": "Via Composer"
        }, 
        {
            "location": "/getting-started/example-usage/", 
            "text": "Each courier is implemented as an adapter in it's own project, so\nthe first step is to pull the correct courier implementation into your project.\n\n\n# Send emails with Sparkpost\n\ncomposer require quartzy/courier-sparkpost\n\n\n\n\n\nNow you just need to create an email and send it:\n\n\n?php\n\n\n\nuse\n \nCourier\\Sparkpost\\SparkpostCourier\n;\n\n\nuse\n \nGuzzleHttp\\Client\n;\n\n\nuse\n \nHttp\\Adapter\\Guzzle6\\Client\n \nas\n \nGuzzleAdapter\n;\n\n\nuse\n \nPhpEmail\\EmailBuilder\n;\n\n\nuse\n \nPhpEmail\\Content\\SimpleContent\n;\n\n\nuse\n \nSparkPost\\SparkPost\n;\n\n\n\n$courier\n \n=\n \nnew\n \nSparkPostCourier\n(\n\n    \nnew\n \nSparkPost\n(\nnew\n \nGuzzleAdapter\n(\nnew\n \nClient\n()),\n \n[\nkey\n=\nYOUR_API_KEY\n])\n\n\n);\n\n\n\n$email\n \n=\n \nEmailBuilder\n::\nemail\n()\n\n    \n-\nwithSubject\n(\nWelcome!\n)\n\n    \n-\nwithContent\n(\nSimpleContent\n::\ntext\n(\nStart your free trial now!!!\n))\n\n    \n-\nfrom\n(\nme@test.com\n)\n\n    \n-\nto\n(\nyou@yourbusiness.com\n)\n\n    \n-\nbuild\n();\n\n\n\n$courier\n-\ndeliver\n(\n$email\n);\n\n\n\n\n\n\nFor details on building the email objects, see \nPhp\nEmail\n.\n\n\nTracking Emails\n\n\nMany SaaS email providers return an ID, sort of like a package receipt, on the\nAPI response. If you would like to get the ID for your own auditing, then this\ncan be done with any \nCourier\n that implements the \nConfirmingCourier\n\ninterface.\n\n\n?php\n\n\n\nuse\n \nCourier\\Sparkpost\\SparkpostCourier\n;\n\n\nuse\n \nGuzzleHttp\\Client\n;\n\n\nuse\n \nHttp\\Adapter\\Guzzle6\\Client\n \nas\n \nGuzzleAdapter\n;\n\n\nuse\n \nPhpEmail\\EmailBuilder\n;\n\n\nuse\n \nPhpEmail\\Content\\SimpleContent\n;\n\n\nuse\n \nSparkPost\\SparkPost\n;\n\n\n\n// The Sparkpost courier implements ConfirmingCourier\n\n\n$courier\n \n=\n \nnew\n \nSparkPostCourier\n(\n\n    \nnew\n \nSparkPost\n(\nnew\n \nGuzzleAdapter\n(\nnew\n \nClient\n()),\n \n[\nkey\n=\nYOUR_API_KEY\n])\n\n\n);\n\n\n\n$email\n \n=\n \nEmailBuilder\n::\nemail\n()\n\n    \n-\nwithSubject\n(\nWelcome!\n)\n\n    \n-\nwithContent\n(\nSimpleContent\n::\ntext\n(\nStart your free trial now!!!\n))\n\n    \n-\nfrom\n(\nme@test.com\n)\n\n    \n-\nto\n(\nyou@yourbusiness.com\n)\n\n    \n-\nbuild\n();\n\n\n\n$courier\n-\ndeliver\n(\n$email\n);\n\n\n\n$receipt\n \n=\n \n$courier\n-\nreceiptFor\n(\n$email\n);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/getting-started/example-usage/#tracking-emails", 
            "text": "Many SaaS email providers return an ID, sort of like a package receipt, on the\nAPI response. If you would like to get the ID for your own auditing, then this\ncan be done with any  Courier  that implements the  ConfirmingCourier \ninterface.  ?php  use   Courier\\Sparkpost\\SparkpostCourier ;  use   GuzzleHttp\\Client ;  use   Http\\Adapter\\Guzzle6\\Client   as   GuzzleAdapter ;  use   PhpEmail\\EmailBuilder ;  use   PhpEmail\\Content\\SimpleContent ;  use   SparkPost\\SparkPost ;  // The Sparkpost courier implements ConfirmingCourier  $courier   =   new   SparkPostCourier ( \n     new   SparkPost ( new   GuzzleAdapter ( new   Client ()),   [ key = YOUR_API_KEY ])  );  $email   =   EmailBuilder :: email () \n     - withSubject ( Welcome! ) \n     - withContent ( SimpleContent :: text ( Start your free trial now!!! )) \n     - from ( me@test.com ) \n     - to ( you@yourbusiness.com ) \n     - build ();  $courier - deliver ( $email );  $receipt   =   $courier - receiptFor ( $email );", 
            "title": "Tracking Emails"
        }, 
        {
            "location": "/getting-started/couriers/", 
            "text": "Couriers are the drivers implementing the \nCourier\n interface. The following\ncouriers are supported out of the box:\n\n\n\n\nMail (using mail function)\n\n\nPostmark\n\n\nSendGrid\n\n\nSparkPost\n\n\nMailjet", 
            "title": "Couriers"
        }, 
        {
            "location": "/couriers/mail/", 
            "text": "The \nMailCourier\n is primarily built as a drop-in testing courier for local development, using the native \nmail\n\nfunction and no other dependencies. The courier will deliver \nSimpleContent\n emails as defined, however, it does not\ncontain any logic for rendering templates. When delivering templated content, the courier will build a text email\nwith the ID of the template and the json-encoded template data.\n\n\nInstall\n\n\nThis package is included in the core \nquartzy/courier\n and no other dependencies are necessary.\n\n\ncomposer require quartzy/courier\n\n\nUsage\n\n\n?php\n\n\n\nuse\n \nCourier\\MailCourier\n;\n\n\nuse\n \nPhpEmail\\Content\\TemplatedContent\n;\n\n\nuse\n \nPhpEmail\\EmailBuilder\n;\n\n\n\n$courier\n \n=\n \nnew\n \nMailCourier\n();\n\n\n\n$email\n \n=\n \nEmailBuilder\n::\nemail\n()\n\n    \n-\nfrom\n(\ntest@mybiz.com\n)\n\n    \n-\nto\n(\nloyal.customer@email.com\n)\n\n    \n-\nreplyTo\n(\ntest@mybiz.com\n,\n \nYour Sales Rep\n)\n\n    \n-\nwithSubject\n(\nWelcome!\n)\n\n    \n-\nwithContent\n(\nnew\n \nTemplatedContent\n(\nmy_email\n,\n \n[\ntestKey\n \n=\n \nvalue\n]))\n\n    \n-\nbuild\n();\n\n\n\n$courier\n-\ndeliver\n(\n$email\n);\n\n\n\n\n\n\nAdding Template Support\n\n\nThe \nMailCourier\n can be extended to support the template rendering of your choice. The \nbuildTemplatedContent\n protected\nfunction in the class is what builds the MIME content of the email body and can be overwritten to support\na template rendering pattern.", 
            "title": "Mail"
        }, 
        {
            "location": "/couriers/mail/#install", 
            "text": "This package is included in the core  quartzy/courier  and no other dependencies are necessary.  composer require quartzy/courier", 
            "title": "Install"
        }, 
        {
            "location": "/couriers/mail/#usage", 
            "text": "?php  use   Courier\\MailCourier ;  use   PhpEmail\\Content\\TemplatedContent ;  use   PhpEmail\\EmailBuilder ;  $courier   =   new   MailCourier ();  $email   =   EmailBuilder :: email () \n     - from ( test@mybiz.com ) \n     - to ( loyal.customer@email.com ) \n     - replyTo ( test@mybiz.com ,   Your Sales Rep ) \n     - withSubject ( Welcome! ) \n     - withContent ( new   TemplatedContent ( my_email ,   [ testKey   =   value ])) \n     - build ();  $courier - deliver ( $email );", 
            "title": "Usage"
        }, 
        {
            "location": "/couriers/mail/#adding-template-support", 
            "text": "The  MailCourier  can be extended to support the template rendering of your choice. The  buildTemplatedContent  protected\nfunction in the class is what builds the MIME content of the email body and can be overwritten to support\na template rendering pattern.", 
            "title": "Adding Template Support"
        }, 
        {
            "location": "/couriers/postmark/", 
            "text": "Install\n\n\ncomposer require camuthig/courier-postmark\n\n\nUsage\n\n\nThe Postmark courier supports both templated and simple emails.\n\n\nTo create a Postmark courier, you should follow the steps documented in the\n\nPostmark PHP\n\ndocs to create a client and pass it into the \nPostmarkCourier\n.\n\n\n?php\n\n\n\nuse\n \nCamuthig\\Courier\\Postmark\\PostmarkCourier\n;\n\n\nuse\n \nGuzzleHttp\\Client\n;\n\n\nuse\n \nPhpEmail\\Content\\TemplatedContent\n;\n\n\nuse\n \nPhpEmail\\EmailBuilder\n;\n\n\nuse\n \nPostmark\\PostmarkClient\n;\n\n\n\nnew\n \nClient\n();\n\n\n\n$courier\n \n=\n \nnew\n \nPostmarkCourier\n(\nnew\n \nPostmarkClient\n(\nMY_KEY\n));\n\n\n\n$email\n \n=\n \nEmailBuilder\n::\nemail\n()\n\n    \n-\nfrom\n(\ntest@mybiz.com\n)\n\n    \n-\nto\n(\nloyal.customer@email.com\n)\n\n    \n-\nreplyTo\n(\ntest@mybiz.com\n,\n \nYour Sales Rep\n)\n\n    \n-\nwithSubject\n(\nWelcome!\n)\n\n    \n-\nwithContent\n(\nnew\n \nTemplatedContent\n(\nmy_email\n,\n \n[\ntestKey\n \n=\n \nvalue\n]))\n\n    \n-\nbuild\n();\n\n\n\n$courier\n-\ndeliver\n(\n$email\n);\n\n\n\n\n\n\nNotes for Postmark Templates\n\n\nImplicit Template Variables\n\n\nPostmark allows users to define template keys in the subject of templated\nemails. To support this functionality, the courier will pass the \nsubject\n of\nthe \nEmail\n into the template variables with the key \nsubject\n.\n\n\nBCC Recipients\n\n\nPostmark does not support sending emails with a BCC recipients list. Courier\ndoes not throw an error when sending emails with a BCC using the Postmark\ncourier, but it is important to note that the email will just not be delivered\nto the given email addresses.", 
            "title": "Postmark"
        }, 
        {
            "location": "/couriers/postmark/#install", 
            "text": "composer require camuthig/courier-postmark", 
            "title": "Install"
        }, 
        {
            "location": "/couriers/postmark/#usage", 
            "text": "The Postmark courier supports both templated and simple emails.  To create a Postmark courier, you should follow the steps documented in the Postmark PHP \ndocs to create a client and pass it into the  PostmarkCourier .  ?php  use   Camuthig\\Courier\\Postmark\\PostmarkCourier ;  use   GuzzleHttp\\Client ;  use   PhpEmail\\Content\\TemplatedContent ;  use   PhpEmail\\EmailBuilder ;  use   Postmark\\PostmarkClient ;  new   Client ();  $courier   =   new   PostmarkCourier ( new   PostmarkClient ( MY_KEY ));  $email   =   EmailBuilder :: email () \n     - from ( test@mybiz.com ) \n     - to ( loyal.customer@email.com ) \n     - replyTo ( test@mybiz.com ,   Your Sales Rep ) \n     - withSubject ( Welcome! ) \n     - withContent ( new   TemplatedContent ( my_email ,   [ testKey   =   value ])) \n     - build ();  $courier - deliver ( $email );", 
            "title": "Usage"
        }, 
        {
            "location": "/couriers/postmark/#notes-for-postmark-templates", 
            "text": "", 
            "title": "Notes for Postmark Templates"
        }, 
        {
            "location": "/couriers/postmark/#implicit-template-variables", 
            "text": "Postmark allows users to define template keys in the subject of templated\nemails. To support this functionality, the courier will pass the  subject  of\nthe  Email  into the template variables with the key  subject .", 
            "title": "Implicit Template Variables"
        }, 
        {
            "location": "/couriers/postmark/#bcc-recipients", 
            "text": "Postmark does not support sending emails with a BCC recipients list. Courier\ndoes not throw an error when sending emails with a BCC using the Postmark\ncourier, but it is important to note that the email will just not be delivered\nto the given email addresses.", 
            "title": "BCC Recipients"
        }, 
        {
            "location": "/couriers/sendgrid/", 
            "text": "Install\n\n\ncomposer require camuthig/courier-sendgrid\n\n\nSetup\n\n\nTo use the SendGrid courier, you will need an API key with the following permissions:\n\n\n\n\nMail Send - Full Access\n\n\n\n\nUsage\n\n\nThe SendGrid courier supports both templated and simple emails.\n\n\n?php\n\n\n\nuse\n \nCamuthig\\Courier\\SendGrid\\SendGridCourier\n;\n\n\n\n$courier\n \n=\n \nnew\n \nSendGridCourier\n(\nnew\n \n\\SendGrid\n(\nmysendgridkey\n));\n\n\n\n\n\n\nNote on Charset\n\n\nSendGrid does not support adding \n; charset=\"x\"\n when defining the type of an\nattachment, as such, whatever value is defined on the \nEmail\n will be ignored\nwhen preparing the delivery for SendGrid.\n\n\nKnown Issues\n\n\nThere are some of known issues regarding the SendGrid courier. These are\nissues built into using SendGrid specifically and not generally across Courier.\n\n\n\n\nThe SendGrid courier will behave unexpectedly when sending multiple attachments\nin templated emails. It has been noted and verified with SendGrid support that the\ntemplates do not render properly in these cases and should be avoided.\n\n\nSending an inline email with a CC list and BCC list along with attachments causes\nthe BCC list to be lost.\n\n\nSending a BCC recipient list will sporadically not include the BCC list in the\nfinal rendered email.", 
            "title": "SendGrid"
        }, 
        {
            "location": "/couriers/sendgrid/#install", 
            "text": "composer require camuthig/courier-sendgrid", 
            "title": "Install"
        }, 
        {
            "location": "/couriers/sendgrid/#setup", 
            "text": "To use the SendGrid courier, you will need an API key with the following permissions:   Mail Send - Full Access", 
            "title": "Setup"
        }, 
        {
            "location": "/couriers/sendgrid/#usage", 
            "text": "The SendGrid courier supports both templated and simple emails.  ?php  use   Camuthig\\Courier\\SendGrid\\SendGridCourier ;  $courier   =   new   SendGridCourier ( new   \\SendGrid ( mysendgridkey ));", 
            "title": "Usage"
        }, 
        {
            "location": "/couriers/sendgrid/#note-on-charset", 
            "text": "SendGrid does not support adding  ; charset=\"x\"  when defining the type of an\nattachment, as such, whatever value is defined on the  Email  will be ignored\nwhen preparing the delivery for SendGrid.", 
            "title": "Note on Charset"
        }, 
        {
            "location": "/couriers/sendgrid/#known-issues", 
            "text": "There are some of known issues regarding the SendGrid courier. These are\nissues built into using SendGrid specifically and not generally across Courier.   The SendGrid courier will behave unexpectedly when sending multiple attachments\nin templated emails. It has been noted and verified with SendGrid support that the\ntemplates do not render properly in these cases and should be avoided.  Sending an inline email with a CC list and BCC list along with attachments causes\nthe BCC list to be lost.  Sending a BCC recipient list will sporadically not include the BCC list in the\nfinal rendered email.", 
            "title": "Known Issues"
        }, 
        {
            "location": "/couriers/sparkpost/", 
            "text": "Install\n\n\ncomposer require quartzy/courier-sparkpost\n\n\nSetup\n\n\nTo use the SparkPost courier, you will need an API key with the following permissions:\n\n\n\n\nTransmissions: Read/Write\n\n\nTemplates: Read-only\n\n\n\n\nUsage\n\n\nThe SparkPost courier supports both templated and simple emails.\n\n\nYou should follow the steps documented in the \nSparkPost\nPHP\n project for details on how to\nbuild a SparkPost client and pass it into a \nSparkPostCourier\n.\n\n\n?php\n\n\n\nuse\n \nCourier\\Sparkpost\\SparkPostCourier\n;\n\n\nuse\n \nGuzzleHttp\\Client\n;\n\n\nuse\n \nHttp\\Adapter\\Guzzle6\\Client\n \nas\n \nGuzzleAdapter\n;\n\n\nuse\n \nPhpEmail\\Content\\TemplatedContent\n;\n\n\nuse\n \nPhpEmail\\EmailBuilder\n;\n\n\nuse\n \nSparkPost\\SparkPost\n;\n\n\n\n$courier\n \n=\n \nnew\n \nSparkPostCourier\n(\n\n    \nnew\n \nSparkPost\n(\nnew\n \nGuzzleAdapter\n(\nnew\n \nClient\n()),\n \n[\nkey\n=\nYOUR_API_KEY\n])\n\n\n);\n\n\n\n$email\n \n=\n \nEmailBuilder\n::\nemail\n()\n\n    \n-\nfrom\n(\ntest@mybiz.com\n)\n\n    \n-\nto\n(\nloyal.customer@email.com\n)\n\n    \n-\nreplyTo\n(\ntest@mybiz.com\n,\n \nYour Sales Rep\n)\n\n    \n-\nwithSubject\n(\nWelcome!\n)\n\n    \n-\nwithContent\n(\nnew\n \nTemplatedContent\n(\nmy_email\n,\n \n[\ntestKey\n \n=\n \nvalue\n]))\n\n    \n-\nbuild\n();\n\n\n\n$courier\n-\ndeliver\n(\n$email\n);\n\n\n\n\n\n\nNotes on Headers\n\n\nAt this time, custom headers are only sent on \nSimpleContent\n emails or\n\nTemplatedContent\n emails that include an attachment.\n\n\nSparkPost does not currently support sending headers on stored template emails.\nThere is currently not a known release date for when this might get fixed, but\nCourier is ready whenever it does and already sends the \nheaders\n value with all\nheaders defined on the \nEmail\n.\n\n\nNotes for SparkPost Templates\n\n\nSparkPost allows users to define templated keys in the from, reply to, and\nsubject fields along with the body. In order to make your courier work as\nexpected, the library will automatically create the following template values\nbased on the properties of the \nEmail\n:\n\n\n\n\nfromAddress\n\n\nfromName\n\n\nreplyTo\n\n\nsubject\n\n\nccHeader\n\n\n\n\nThese will be added to the template data already defined in the\n\nTemplatedContent\n, assuming the keys are not already set manually.\n\n\nTemporary fix for correctly displaying CC header\n\n\nAs documented in this\n\npost\n, the SparkPost\nAPI requires sending the \nCC\n header information in order to properly display\nrecipients. In the context of inline templates and non-templated emails, setting\nthis header works fine. However, if sending a standard templated email,\nSparkPost's API does not respect the \nCC\n header. To work around this, Courier\nwill set the \nccHeader\n variable in the substitution data to what the value\n\nshould\n be. In order to leverage this variable, you will need to update your\ntemplate using the API (the header attributes are not available in the web\neditor) to include the value. This can be done with a request like:\n\n\n// PUT https://api.sparkpost.com/api/v1/templates/my-template-id\n\n\n\n{\n\n  \ncontent\n:\n \n{\n\n    \n// All of your other content must go here as this PUT will overwrite all other content\n\n    \nheaders\n:\n \n{\n\n      \nCC\n:\n \n{{ccHeader}}\n\n    \n}\n\n  \n}\n\n\n}", 
            "title": "SparkPost"
        }, 
        {
            "location": "/couriers/sparkpost/#install", 
            "text": "composer require quartzy/courier-sparkpost", 
            "title": "Install"
        }, 
        {
            "location": "/couriers/sparkpost/#setup", 
            "text": "To use the SparkPost courier, you will need an API key with the following permissions:   Transmissions: Read/Write  Templates: Read-only", 
            "title": "Setup"
        }, 
        {
            "location": "/couriers/sparkpost/#usage", 
            "text": "The SparkPost courier supports both templated and simple emails.  You should follow the steps documented in the  SparkPost\nPHP  project for details on how to\nbuild a SparkPost client and pass it into a  SparkPostCourier .  ?php  use   Courier\\Sparkpost\\SparkPostCourier ;  use   GuzzleHttp\\Client ;  use   Http\\Adapter\\Guzzle6\\Client   as   GuzzleAdapter ;  use   PhpEmail\\Content\\TemplatedContent ;  use   PhpEmail\\EmailBuilder ;  use   SparkPost\\SparkPost ;  $courier   =   new   SparkPostCourier ( \n     new   SparkPost ( new   GuzzleAdapter ( new   Client ()),   [ key = YOUR_API_KEY ])  );  $email   =   EmailBuilder :: email () \n     - from ( test@mybiz.com ) \n     - to ( loyal.customer@email.com ) \n     - replyTo ( test@mybiz.com ,   Your Sales Rep ) \n     - withSubject ( Welcome! ) \n     - withContent ( new   TemplatedContent ( my_email ,   [ testKey   =   value ])) \n     - build ();  $courier - deliver ( $email );", 
            "title": "Usage"
        }, 
        {
            "location": "/couriers/sparkpost/#notes-on-headers", 
            "text": "At this time, custom headers are only sent on  SimpleContent  emails or TemplatedContent  emails that include an attachment.  SparkPost does not currently support sending headers on stored template emails.\nThere is currently not a known release date for when this might get fixed, but\nCourier is ready whenever it does and already sends the  headers  value with all\nheaders defined on the  Email .", 
            "title": "Notes on Headers"
        }, 
        {
            "location": "/couriers/sparkpost/#notes-for-sparkpost-templates", 
            "text": "SparkPost allows users to define templated keys in the from, reply to, and\nsubject fields along with the body. In order to make your courier work as\nexpected, the library will automatically create the following template values\nbased on the properties of the  Email :   fromAddress  fromName  replyTo  subject  ccHeader   These will be added to the template data already defined in the TemplatedContent , assuming the keys are not already set manually.", 
            "title": "Notes for SparkPost Templates"
        }, 
        {
            "location": "/couriers/sparkpost/#temporary-fix-for-correctly-displaying-cc-header", 
            "text": "As documented in this post , the SparkPost\nAPI requires sending the  CC  header information in order to properly display\nrecipients. In the context of inline templates and non-templated emails, setting\nthis header works fine. However, if sending a standard templated email,\nSparkPost's API does not respect the  CC  header. To work around this, Courier\nwill set the  ccHeader  variable in the substitution data to what the value should  be. In order to leverage this variable, you will need to update your\ntemplate using the API (the header attributes are not available in the web\neditor) to include the value. This can be done with a request like:  // PUT https://api.sparkpost.com/api/v1/templates/my-template-id  { \n   content :   { \n     // All of your other content must go here as this PUT will overwrite all other content \n     headers :   { \n       CC :   {{ccHeader}} \n     } \n   }  }", 
            "title": "Temporary fix for correctly displaying CC header"
        }
    ]
}