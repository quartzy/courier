{
    "docs": [
        {
            "location": "/", 
            "text": "A library to send transactional emails using domain objects and concise\ninterfaces.\n\n\nThis library provides tools to send standardized emails without having to\nreinvent the wheel to using third-party SaaS SMTP provides, like SparkPost and\nPostmark. By leveraging a \nstandardized domain\nmodel\n for defining our emails, Courier is\ncapable of defining drivers (or \"couriers\" in our case) that allow the developer\nto easily switch out how they send their emails without changing any part of\ntheir code that builds and delivers the email.", 
            "title": "Home"
        }, 
        {
            "location": "/getting-started/installation/", 
            "text": "Via Composer\n\n\ncomposer require quartzy/courier", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/installation/#via-composer", 
            "text": "composer require quartzy/courier", 
            "title": "Via Composer"
        }, 
        {
            "location": "/getting-started/example-usage/", 
            "text": "Each courier will have their own dependencies, for example:\n\n\n# Send emails with SendGrid\n\ncomposer require sendgrid/sendgrid\n\n\n\n\n\nNow you just need to create an email and send it:\n\n\n?php\n\n\n\nuse\n \nCourier\\SendGridCourier\n;\n\n\nuse\n \nPhpEmail\\EmailBuilder\n;\n\n\nuse\n \nPhpEmail\\Content\\SimpleContent\n;\n\n\n\n$key\n     \n=\n \ngetenv\n(\nSENDGRID_KEY\n);\n\n\n$courier\n \n=\n \nnew\n \nSendGridCourier\n(\nnew\n \n\\SendGrid\n(\n$key\n));\n\n\n\n$email\n \n=\n \nEmailBuilder\n::\nemail\n()\n\n    \n-\nwithSubject\n(\nWelcome!\n)\n\n    \n-\nwithContent\n(\nSimpleContent\n::\ntext\n(\nStart your free trial now!!!\n))\n\n    \n-\nfrom\n(\nme@test.com\n)\n\n    \n-\nto\n(\nyou@yourbusiness.com\n)\n\n    \n-\nbuild\n();\n\n\n\n$courier\n-\ndeliver\n(\n$email\n);\n\n\n\n\n\n\nFor details on building the email objects, see the \nPhp\nEmail\n.\n\n\nTracking Emails\n\n\nMany SaaS email providers return an ID, sort of like a package receipt, on the\nAPI response. If you would like to get the ID for your own auditing, then this\ncan be done with any \nCourier\n that implements the \nConfirmingCourier\n\ninterface.\n\n\n?php\n\n\n\nuse\n \nCourier\\SendGridCourier\n;\n\n\nuse\n \nPhpEmail\\EmailBuilder\n;\n\n\nuse\n \nPhpEmail\\Content\\SimpleContent\n;\n\n\n\n$key\n     \n=\n \ngetenv\n(\nSENDGRID_KEY\n);\n\n\n\n// The SendGrid courier implements ConfirmingCourier\n\n\n$courier\n \n=\n \nnew\n \nSendGridCourier\n(\nnew\n \n\\SendGrid\n(\n$key\n));\n\n\n\n$email\n \n=\n \nEmailBuilder\n::\nemail\n()\n\n    \n-\nwithSubject\n(\nWelcome!\n)\n\n    \n-\nwithContent\n(\nSimpleContent\n::\ntext\n(\nStart your free trial now!!!\n))\n\n    \n-\nfrom\n(\nme@test.com\n)\n\n    \n-\nto\n(\nyou@yourbusiness.com\n)\n\n    \n-\nbuild\n();\n\n\n\n$courier\n-\ndeliver\n(\n$email\n);\n\n\n\n$receipt\n \n=\n \n$courier\n-\nreceiptFor\n(\n$email\n);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/getting-started/example-usage/#tracking-emails", 
            "text": "Many SaaS email providers return an ID, sort of like a package receipt, on the\nAPI response. If you would like to get the ID for your own auditing, then this\ncan be done with any  Courier  that implements the  ConfirmingCourier \ninterface.  ?php  use   Courier\\SendGridCourier ;  use   PhpEmail\\EmailBuilder ;  use   PhpEmail\\Content\\SimpleContent ;  $key       =   getenv ( SENDGRID_KEY );  // The SendGrid courier implements ConfirmingCourier  $courier   =   new   SendGridCourier ( new   \\SendGrid ( $key ));  $email   =   EmailBuilder :: email () \n     - withSubject ( Welcome! ) \n     - withContent ( SimpleContent :: text ( Start your free trial now!!! )) \n     - from ( me@test.com ) \n     - to ( you@yourbusiness.com ) \n     - build ();  $courier - deliver ( $email );  $receipt   =   $courier - receiptFor ( $email );", 
            "title": "Tracking Emails"
        }, 
        {
            "location": "/getting-started/couriers/", 
            "text": "Couriers are the drivers implementing the \nCourier\n interface. The following\ncouriers are supported out of the box:\n\n\n\n\nPostmark\n\n\nSendGrid\n\n\nSparkPost", 
            "title": "Couriers"
        }, 
        {
            "location": "/couriers/postmark/", 
            "text": "The Postmark courier supports both templated and simple emails.\n\n\nTo create a Postmark courier, you should follow the steps documented in the\n\nPostmark PHP\n\ndocs to create a client and pass it into the \nPostmarkCourier\n.\n\n\n?php\n\n\n\nuse\n \nCourier\\PostmarkCourier\n;\n\n\nuse\n \nGuzzleHttp\\Client\n;\n\n\nuse\n \nPhpEmail\\Content\\TemplatedContent\n;\n\n\nuse\n \nPhpEmail\\EmailBuilder\n;\n\n\nuse\n \nPostmark\\PostmarkClient\n;\n\n\n\nnew\n \nClient\n();\n\n\n\n$courier\n \n=\n \nnew\n \nPostmarkCourier\n(\nnew\n \nPostmarkClient\n(\nMY_KEY\n));\n\n\n\n$email\n \n=\n \nEmailBuilder\n::\nemail\n()\n\n    \n-\nfrom\n(\ntest@mybiz.com\n)\n\n    \n-\nto\n(\nloyal.customer@email.com\n)\n\n    \n-\nreplyTo\n(\ntest@mybiz.com\n,\n \nYour Sales Rep\n)\n\n    \n-\nwithSubject\n(\nWelcome!\n)\n\n    \n-\nwithContent\n(\nnew\n \nTemplatedContent\n(\nmy_email\n,\n \n[\ntestKey\n \n=\n \nvalue\n]))\n\n    \n-\nbuild\n();\n\n\n\n$courier\n-\ndeliver\n(\n$email\n);\n\n\n\n\n\n\nNotes for Postmark Templates\n\n\nPostmark allows users to define template keys in the subject of templated\nemails. To support this functionality, the courier will pass the \nsubject\n of\nthe \nEmail\n into the template variables with the key \nsubject\n.", 
            "title": "Postmark"
        }, 
        {
            "location": "/couriers/postmark/#notes-for-postmark-templates", 
            "text": "Postmark allows users to define template keys in the subject of templated\nemails. To support this functionality, the courier will pass the  subject  of\nthe  Email  into the template variables with the key  subject .", 
            "title": "Notes for Postmark Templates"
        }, 
        {
            "location": "/couriers/sendgrid/", 
            "text": "The SendGrid courier supports both templated and simple emails. To use the\nSendGrid courier, you will need an API key with the following permissions:\n\n\n\n\nMail Send - Full Access\n\n\n\n\nYou will also need to include \nsendgrid/sendgrid\n into your dependencies. You\ncan then make a SendGrid courier like so:\n\n\n?php\n\n\n\nuse\n \nCourier\\SendGridCourier\n;\n\n\n\n$courier\n \n=\n \nnew\n \nSendGridCourier\n(\nnew\n \n\\SendGrid\n(\nmysendgridkey\n));\n\n\n\n\n\n\nNote on Charset\n\n\nSendGrid does not support adding \n; charset=\"x\"\n when defining the type of an\nattachment, as such, whatever value is defined on the \nEmail\n will be ignored\nwhen preparing the delivery for SendGrid.", 
            "title": "SendGrid"
        }, 
        {
            "location": "/couriers/sendgrid/#note-on-charset", 
            "text": "SendGrid does not support adding  ; charset=\"x\"  when defining the type of an\nattachment, as such, whatever value is defined on the  Email  will be ignored\nwhen preparing the delivery for SendGrid.", 
            "title": "Note on Charset"
        }, 
        {
            "location": "/couriers/sparkpost/", 
            "text": "The SparkPost courier supports both templated and simple emails. To use the\nSparkPost courier, you will need an API key with the following permissions:\n\n\n\n\nTransmissions: Read/Write\n\n\nTemplates: Read-only\n\n\n\n\nYou should follow the steps documented in the \nSparkPost\nPHP\n project for details on how to\nbuild a SparkPost client and pass it into a \nSparkPostCourier\n:\n\n\n?php\n\n\n\nuse\n \nCourier\\SparkPostCourier\n;\n\n\nuse\n \nGuzzleHttp\\Client\n;\n\n\nuse\n \nHttp\\Adapter\\Guzzle6\\Client\n \nas\n \nGuzzleAdapter\n;\n\n\nuse\n \nPhpEmail\\Content\\TemplatedContent\n;\n\n\nuse\n \nPhpEmail\\EmailBuilder\n;\n\n\nuse\n \nSparkPost\\SparkPost\n;\n\n\n\nnew\n \nClient\n();\n\n\n\n$courier\n \n=\n \nnew\n \nSparkPostCourier\n(\n\n    \nnew\n \nSparkPost\n(\nnew\n \nGuzzleAdapter\n(\nnew\n \nClient\n()),\n \n[\nkey\n=\nYOUR_API_KEY\n])\n\n\n);\n\n\n\n$email\n \n=\n \nEmailBuilder\n::\nemail\n()\n\n    \n-\nfrom\n(\ntest@mybiz.com\n)\n\n    \n-\nto\n(\nloyal.customer@email.com\n)\n\n    \n-\nreplyTo\n(\ntest@mybiz.com\n,\n \nYour Sales Rep\n)\n\n    \n-\nwithSubject\n(\nWelcome!\n)\n\n    \n-\nwithContent\n(\nnew\n \nTemplatedContent\n(\nmy_email\n,\n \n[\ntestKey\n \n=\n \nvalue\n]))\n\n    \n-\nbuild\n();\n\n\n\n$courier\n-\ndeliver\n(\n$email\n);\n\n\n\n\n\n\nNotes on Headers\n\n\nAt this time, custom headers are only sent on \nSimpleContent\n emails or\n\nTemplatedContent\n emails that include an attachment.\n\n\nSparkPost does not currently support sending headers on stored template emails.\nThere is currently not a known release date for when this might get fixed, but\nCourier is ready whenever it does and already sends the \nheaders\n value with all\nheaders defined on the \nEmail\n.\n\n\nNotes for SparkPost Templates\n\n\nSparkPost allows users to define templated keys in the from, reply to, and\nsubject fields along with the body. In order to make your courier work as\nexpected, the library will automatically created the following template values\nbased on the properties of the \nEmail\n:\n\n\n\n\nfromEmail\n\n\nfromDomain\n\n\nfromName\n\n\nreplyTo\n\n\nsubject\n\n\nccHeader\n\n\n\n\nThese will be added to the template data already defined in the\n\nTemplatedContent\n assuming the keys are not already set manually.\n\n\nTemporary fix for correctly displaying CC header\n\n\nAs documented in this\n\npost\n, the SparkPost\nAPI requires sending the \nCC\n header information in order to properly display\nrecipients. In the context of inline templates and non-templated emails, setting\nthis header works fine. However, if sending a standard templated email,\nSparkPost's API does not respect the \nCC\n header. To work around this, Courier\nwill set the \nccHeader\n variable in the substitution data to what the value\n\nshould\n be. In order to leverage this variable, you will need to update your\ntemplate using the API (the header attributes are not available in the web\neditor) to include the value. This can be done with a request like:\n\n\n// PUT https://api.sparkpost.com/api/v1/templates/my-template-id\n\n\n\n{\n\n  \ncontent\n:\n \n{\n\n    \n// All of your other content must go here as this PUT will overwrite all other content\n\n    \nheaders\n:\n \n{\n\n      \nCC\n:\n \n{{ccHeader}}\n\n    \n}\n\n  \n}\n\n\n}", 
            "title": "SparkPost"
        }, 
        {
            "location": "/couriers/sparkpost/#notes-on-headers", 
            "text": "At this time, custom headers are only sent on  SimpleContent  emails or TemplatedContent  emails that include an attachment.  SparkPost does not currently support sending headers on stored template emails.\nThere is currently not a known release date for when this might get fixed, but\nCourier is ready whenever it does and already sends the  headers  value with all\nheaders defined on the  Email .", 
            "title": "Notes on Headers"
        }, 
        {
            "location": "/couriers/sparkpost/#notes-for-sparkpost-templates", 
            "text": "SparkPost allows users to define templated keys in the from, reply to, and\nsubject fields along with the body. In order to make your courier work as\nexpected, the library will automatically created the following template values\nbased on the properties of the  Email :   fromEmail  fromDomain  fromName  replyTo  subject  ccHeader   These will be added to the template data already defined in the TemplatedContent  assuming the keys are not already set manually.", 
            "title": "Notes for SparkPost Templates"
        }, 
        {
            "location": "/couriers/sparkpost/#temporary-fix-for-correctly-displaying-cc-header", 
            "text": "As documented in this post , the SparkPost\nAPI requires sending the  CC  header information in order to properly display\nrecipients. In the context of inline templates and non-templated emails, setting\nthis header works fine. However, if sending a standard templated email,\nSparkPost's API does not respect the  CC  header. To work around this, Courier\nwill set the  ccHeader  variable in the substitution data to what the value should  be. In order to leverage this variable, you will need to update your\ntemplate using the API (the header attributes are not available in the web\neditor) to include the value. This can be done with a request like:  // PUT https://api.sparkpost.com/api/v1/templates/my-template-id  { \n   content :   { \n     // All of your other content must go here as this PUT will overwrite all other content \n     headers :   { \n       CC :   {{ccHeader}} \n     } \n   }  }", 
            "title": "Temporary fix for correctly displaying CC header"
        }
    ]
}